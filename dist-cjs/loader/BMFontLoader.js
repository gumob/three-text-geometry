"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.BMFontLoader=void 0;const tslib_1=require("tslib"),axios_1=(0,tslib_1.__importDefault)(require("axios")),error_1=require("../error"),parser_1=require("../parser");class BMFontLoader{constructor(){}loadJson(r,a=void 0){return new Promise((e,o)=>{axios_1.default.get(r,a).then(r=>{e((new parser_1.BMFontJsonParser).parse(r.data))}).catch(r=>{o(new error_1.BMFontLoaderError(error_1.BMFontLoaderErrorType.LoadError,r.message))})})}loadXML(r,a=void 0){return new Promise((e,o)=>{axios_1.default.get(r,a).then(r=>{e((new parser_1.BMFontXMLParser).parse(r.data.toString()))}).catch(r=>{o(new error_1.BMFontLoaderError(error_1.BMFontLoaderErrorType.LoadError,r.message))})})}loadAscii(r,a=void 0){return new Promise((e,o)=>{axios_1.default.get(r,a).then(r=>{e((new parser_1.BMFontAsciiParser).parse(r.data.toString()))}).catch(r=>{o(new error_1.BMFontLoaderError(error_1.BMFontLoaderErrorType.LoadError,r.message))})})}loadBinary(r,a=void 0){return new Promise((e,o)=>{axios_1.default.get(r,a).then(r=>{r="string"==typeof r.data?Buffer.from(r.data,"binary"):r.data;e((new parser_1.BMFontBinaryParser).parse(r))}).catch(r=>{o(new error_1.BMFontLoaderError(error_1.BMFontLoaderErrorType.LoadError,r.message))})})}}exports.BMFontLoader=BMFontLoader;