"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.BMFontAsciiParser=void 0;const error_1=require("../error"),types_1=require("../types");class BMFontAsciiParser{parse(r){const e=(r=r.trim()).split(/\r\n?|\n/g);if(0===e.length)throw new error_1.BMFontLoaderError(error_1.BMFontLoaderErrorType.ParseError,"No data in BMFont file");const s=(0,types_1.DefaultBMFont)();if(e.forEach((r,e)=>{if(r=r.replace(/[\s\t]+/g," ").trim()){var o=r.indexOf(" ");if(-1===o)throw new error_1.BMFontLoaderError(error_1.BMFontLoaderErrorType.ParseError,"No page data");var t=r.substring(0,o);const a={};switch(r.substring(o+1).replace(/[\s\t]+/g," ").split(" ").forEach(r=>{var e=r.split("="),r=e[0];const o=e[1];/^-?\d+\.?\d*$/.test(o)?a[r]=+o:/^[\d,]+/.test(o)?a[r]=o.split(",").map(r=>+r):/^("|').*("|')$/.test(o)?a[r]=o.replace(/^("|')(.*)("|')$/g,"$2"):a[r]=o}),t){case"info":s.info=a;break;case"common":s.common=a;break;case"distanceField":s.distanceField=a;break;case"page":s.pages.push(a.file);break;case"chars":break;case"char":s.chars.push(a);break;case"kernings":break;case"kerning":s.kernings.push(a)}}}),JSON.stringify(s.info)===JSON.stringify((0,types_1.DefaultBMFontInfo)()))throw new error_1.BMFontLoaderError(error_1.BMFontLoaderErrorType.ParseError,`No info data. 
`+JSON.stringify(s));if(JSON.stringify(s.common)===JSON.stringify((0,types_1.DefaultBMFontCommon)()))throw new error_1.BMFontLoaderError(error_1.BMFontLoaderErrorType.ParseError,`No common data. 
`+JSON.stringify(s));if(0==s.pages.length)throw new error_1.BMFontLoaderError(error_1.BMFontLoaderErrorType.ParseError,`No page data. 
`+JSON.stringify(s));if(0==s.chars.length)throw new error_1.BMFontLoaderError(error_1.BMFontLoaderErrorType.ParseError,`No char data. 
`+JSON.stringify(s));return s}}exports.BMFontAsciiParser=BMFontAsciiParser;