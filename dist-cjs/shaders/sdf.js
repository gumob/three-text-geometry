import*as THREE from"three";function createSDFShader(e){var a=void 0!==(e=e||{}).opacity?e.opacity:1,t=void 0!==e.alphaTest?e.alphaTest:1e-4,o=e.precision||"highp",i=e.color||new THREE.Color,r=e.map||new THREE.Texture;return delete e.map,delete e.color,delete e.precision,delete e.opacity,Object.assign({uniforms:{opacity:{type:"f",value:a},map:{type:"t",value:r},color:{type:"c",value:i}},vertexShader:["attribute vec2 uv;","attribute vec4 position;","uniform mat4 projectionMatrix;","uniform mat4 modelViewMatrix;","varying vec2 vUv;","void main() {","vUv = uv;","gl_Position = projectionMatrix * modelViewMatrix * position;","}"].join("\n"),fragmentShader:["#ifdef GL_OES_standard_derivatives","#extension GL_OES_standard_derivatives : enable","#endif",`precision ${o} float;`,"uniform float opacity;","uniform vec3 color;","uniform sampler2D map;","varying vec2 vUv;","float aastep(float value) {","  #ifdef GL_OES_standard_derivatives","    float afwidth = length(vec2(dFdx(value), dFdy(value))) * 0.70710678118654757;","  #else","    float afwidth = (1.0 / 32.0) * (1.4142135623730951 / (2.0 * gl_FragCoord.w));","  #endif","  return smoothstep(0.5 - afwidth, 0.5 + afwidth, value);","}","void main() {","  vec4 texColor = texture2D(map, vUv);","  float alpha = aastep(texColor.a);","  gl_FragColor = vec4(color, opacity * alpha);",0===t?"":`  if (gl_FragColor.a < ${t}) discard;`,"}"].join("\n")},e)}export{createSDFShader};