import{useState,useRef}from"react";import axios from"axios";import useSWR from"swr";import{TextureLoader}from"three";import{BMFontAsciiParser,BMFontBinaryParser,BMFontJsonParser,BMFontXMLParser}from"../parser";import{useLoader}from"@react-three/fiber";let useFont=(r,e,n)=>{let o=useRef(n),[t,s]=(o.current=n,useState(!0));let u=useRef(new Array(2).fill(0)),a=useRef(new Array(2).fill(0)),c=useRef(0),l=useRef(0),i=useRef(0),d=useRef(0);let f=(r,e,t)=>{u.current[r]=e,a.current[r]=t,c.current=u.current.reduce((r,e)=>r+e,0),l.current=a.current.reduce((r,e)=>r+e,0),0!==c.current&&0!==l.current&&(i.current=Math.round(100*c.current/l.current),console.log("onProgress",n),console.log("calculateProgress","sumBytesLoaded",c.current,"sumBytesTotal",l.current,"sumPercentCompleted",i.current),o.current?.(c.current,l.current,i.current))};var{data:r,isLoading:m}=useSWR(r,r=>(async(t,n)=>t?axios.get(t,{onDownloadProgress:async r=>{f(n,r.loaded,r.total??0)}}).then(async r=>{d.current++,f(n,a.current[n],a.current[n]);var e=r.data;switch(t.split(".").pop()?.toLowerCase()){case"xml":return(new BMFontXMLParser).parse(e);case"bin":return(new BMFontBinaryParser).parse(Buffer.from(e,"utf-8"));case"json":return(new BMFontJsonParser).parse(e);default:return(new BMFontAsciiParser).parse(e)}}):null)(r,0));return{font:r,texture:useLoader(TextureLoader,e??"",void 0,r=>{f(1,r.loaded,r.total??0),r.loaded===r.total&&(d.current++,s(!1))}),isLoading:m||t}};export{useFont};