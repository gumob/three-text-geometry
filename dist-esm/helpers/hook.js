import{useRef}from"react";import axios from"axios";import useSWR from"swr";import{TextureLoader}from"three";import{BMFontAsciiParser,BMFontBinaryParser,BMFontJsonParser,BMFontXMLParser}from"../parser";let useFont=(t=null,r=null,o=null)=>{let s=useRef(new Array(2).fill(0)),a=useRef(new Array(2).fill(0)),u=useRef(0),c=useRef(0),l=useRef(0),i=useRef(0);var{data:e,isLoading:n}=useSWR(t,r=>d(r,0)),{data:r,isLoading:f}=useSWR(r,r=>p(r,1));let d=async(n,t)=>n?axios.get(n,{onDownloadProgress:async r=>{m(t,r.loaded,r.total??0)}}).then(async r=>{i.current++,m(t,a.current[t],a.current[t]);var e=r.data;switch(n.split(".").pop()?.toLowerCase()){case"xml":return(new BMFontXMLParser).parse(e);case"bin":return(new BMFontBinaryParser).parse(Buffer.from(e,"utf-8"));case"json":return(new BMFontJsonParser).parse(e);default:return(new BMFontAsciiParser).parse(e)}}):null,p=async(r,t)=>r?new Promise((e,n)=>{(new TextureLoader).load(r,r=>{i.current++,m(t,a.current[t],a.current[t]),e(r)},r=>{m(t,r.loaded,r.total??0)},r=>{n(r)})}):null,m=(r,e,n)=>{s.current[r]=e,a.current[r]=n,u.current=s.current.reduce((r,e)=>r+e,0),c.current=a.current.reduce((r,e)=>r+e,0),0!==u.current&&0!==c.current&&(l.current=Math.round(100*u.current/c.current),console.log("calculateProgress","fontUrl",t,"onProgress",o),o?.(u.current,c.current,l.current))};return{font:e,texture:r,isLoading:n||f}};export{useFont};