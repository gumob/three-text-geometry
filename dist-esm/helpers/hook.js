import{useRef}from"react";import axios from"axios";import useSWR from"swr";import{TextureLoader}from"three";import{BMFontAsciiParser,BMFontBinaryParser,BMFontJsonParser,BMFontXMLParser}from"../parser";let useFont=(e=null,r=null,t=null)=>{let a=useRef(t),o=useRef(new Array(2).fill(0)),s=useRef(new Array(2).fill(0)),u=useRef(0),c=useRef(0),l=useRef(0),i=useRef(0);var{data:t,error:e,isLoading:n}=useSWR(e,e=>p(e,0),{revalidateOnFocus:!1,revalidateOnReconnect:!1}),{data:r,error:d,isLoading:f}=useSWR(r,e=>y(e,1),{revalidateOnFocus:!1,revalidateOnReconnect:!1});let p=async(t,n)=>t?axios.get(t,{onDownloadProgress:async e=>{R(n,e.loaded,e.total??0,t)}}).then(async e=>{i.current++,R(n,s.current[n],s.current[n],t);var r=e.data;switch(t.split(".").pop()?.toLowerCase()){case"xml":return(new BMFontXMLParser).parse(r);case"bin":return(new BMFontBinaryParser).parse(Buffer.from(r,"utf-8"));case"json":return(new BMFontJsonParser).parse(r);default:return(new BMFontAsciiParser).parse(r)}}):null,y=async(r,t)=>r?axios.get(r,{responseType:"arraybuffer",headers:{"Content-Type":"image/*"},onDownloadProgress:async e=>{R(t,e.loaded,e.total??0,r)}}).then(async e=>(i.current++,R(t,s.current[t],s.current[t],r),e=new Blob([e.data],{type:e.headers["content-type"]}),e=URL.createObjectURL(e),(new TextureLoader).load(e))):null,R=(e,r,t,n)=>{o.current[e]=r,s.current[e]=t,r=s.current.filter(e=>0!==e).length/2,u.current=o.current.reduce((e,r)=>e+r,0),c.current=s.current.reduce((e,r)=>e+r,0),0!==c.current&&(l.current=Math.round(100*u.current/c.current)*r,a.current?.(u.current,c.current,l.current))};return{font:t,texture:r,fontError:e,textureError:d,isLoading:n||f}};export{useFont};