import{useEffect,useRef}from"react";import axios from"axios";import useSWR from"swr";import{TextureLoader}from"three";import{BMFontAsciiParser,BMFontBinaryParser,BMFontJsonParser,BMFontXMLParser}from"../parser";let useFont=(r,e,t)=>{let n=useRef(t);let s=useRef(new Array(2).fill(0)),o=useRef(new Array(2).fill(0)),u=useRef(0),a=useRef(0),c=useRef(0),l=useRef(0),f=(r,e,t)=>{s.current[r]=e,o.current[r]=t,u.current=s.current.reduce((r,e)=>r+e,0),a.current=o.current.reduce((r,e)=>r+e,0),0!==u.current&&0!==a.current&&(c.current=Math.round(100*u.current/a.current),console.log("onProgress",n.current),console.log("calculateProgress","sumBytesLoaded",u.current,"sumBytesTotal",a.current,"sumPercentCompleted",c.current),n.current?.(u.current,a.current,c.current))};useEffect(()=>{console.log("useEffect","onProgress",t),n.current=t},[t]);var{data:r,isLoading:i}=useSWR(r,r=>(async(t,n)=>t?axios.get(t,{onDownloadProgress:async r=>{f(n,r.loaded,r.total??0)}}).then(async r=>{l.current++,f(n,o.current[n],o.current[n]);var e=r.data;switch(t.split(".").pop()?.toLowerCase()){case"xml":return(new BMFontXMLParser).parse(e);case"bin":return(new BMFontBinaryParser).parse(Buffer.from(e,"utf-8"));case"json":return(new BMFontJsonParser).parse(e);default:return(new BMFontAsciiParser).parse(e)}}):null)(r,0)),{data:e,isLoading:d}=useSWR(e,r=>(async(r,n)=>r?new Promise((e,t)=>{(new TextureLoader).load(r,r=>{l.current++,f(n,o.current[n],o.current[n]),e(r)},r=>{f(n,r.loaded,r.total??0)},r=>{t(r)})}):null)(r,1));return{font:r,texture:e,isLoading:i||d}};export{useFont};