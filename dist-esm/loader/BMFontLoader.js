import axios from"axios";import{BMFontLoaderError,BMFontLoaderErrorType}from"../error";import{BMFontAsciiParser,BMFontBinaryParser,BMFontJsonParser,BMFontXMLParser}from"../parser";class BMFontLoader{constructor(){}loadJson(r,a=void 0){return new Promise((o,e)=>{axios.get(r,a).then(r=>{o((new BMFontJsonParser).parse(r.data))}).catch(r=>{e(new BMFontLoaderError(BMFontLoaderErrorType.LoadError,r.message))})})}loadXML(r,a=void 0){return new Promise((o,e)=>{axios.get(r,a).then(r=>{o((new BMFontXMLParser).parse(r.data.toString()))}).catch(r=>{e(new BMFontLoaderError(BMFontLoaderErrorType.LoadError,r.message))})})}loadAscii(r,a=void 0){return new Promise((o,e)=>{axios.get(r,a).then(r=>{o((new BMFontAsciiParser).parse(r.data.toString()))}).catch(r=>{e(new BMFontLoaderError(BMFontLoaderErrorType.LoadError,r.message))})})}loadBinary(r,a=void 0){return new Promise((o,e)=>{axios.get(r,a).then(r=>{r="string"==typeof r.data?Buffer.from(r.data,"binary"):r.data;o((new BMFontBinaryParser).parse(r))}).catch(r=>{e(new BMFontLoaderError(BMFontLoaderErrorType.LoadError,r.message))})})}}export{BMFontLoader};